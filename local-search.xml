<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>github搭建博客</title>
    <link href="/2020/11/01/github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/11/01/github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="github搭建博客"><a href="#github搭建博客" class="headerlink" title="github搭建博客"></a><strong>github搭建博客</strong></h2><h3 id="注册github并创建仓库"><a href="#注册github并创建仓库" class="headerlink" title="注册github并创建仓库"></a><strong>注册github并创建仓库</strong></h3><p>先在github上<strong>注册</strong>一个账户，github网址:    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://github.com<br></code></pre></td></tr></table></figure><p>登录之后点击头像右侧 <strong>+号</strong> <strong>new repository</strong>新建一个仓库用来存放网页代码</p><img src="/images/github搭建博客/image-20230317162155308-16795781860401.png" alt="image-20230317162155308" style="zoom: 67%;" /><p>仓库名一般为  <strong>用户名.github.io</strong>  这里我已经有一个同名的仓库了所以报错，其他选项默认，点击 create repository创建</p><img src="/images/github搭建博客/image-20230317162739601-16795781860413.png" alt="image-20230317162739601" style="zoom:67%;" /><p>至此，一个库已经创建好了，可以点击右上方他头像进入主页查看</p><img src="/images/github搭建博客/image-20230323144026787-16795781860412.png" alt="image-20230323144026787" style="zoom:67%;" /><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a><strong>安装git</strong></h3><p>可以先打个<strong>git</strong>来判断有没有安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git<br>The program <span class="hljs-string">&#x27;git&#x27;</span> is currently not installed. You can install it by typing:<br>sudo apt-get install git<br></code></pre></td></tr></table></figure><p>使用ubuntu或者debian就直接使用一下命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install git<br></code></pre></td></tr></table></figure><p>使用centos或其他版本可在git官网下载源码，解压，键入以下命令编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./config<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install git<br></code></pre></td></tr></table></figure><p>安装完成后<strong>设置</strong>github用户名和注册邮箱地址，因为git是分布式版本控制系统，所以每个机器都必须自报家门</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>通过一下命令查看设置<strong>是否正确</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name<br>git config --global user.email<br></code></pre></td></tr></table></figure><p>那么，为什么要设置github用户名和注册邮箱地址</p><p>​在使用Git管理代码时，每次提交(commit)代码时都需要记录提交者的身份信息，包括用户名和邮箱地址。这些信息将被包含在Git提交历史记录中，并用于跟踪代码的贡献者。因此，你需要在Git安装完成后设置GitHub用户名和注册邮箱地址，以便在提交代码时正确地记录这些信息。</p><p>​同时，当你在GitHub上创建新的代码库时，你需要使用Git作为代码管理工具，并将本地代码库与GitHub代码库关联起来。在此过程中，GitHub需要知道你的用户名和邮箱地址以正确地关联你的代码库。</p><p>​总的来说，设置GitHub用户名和注册邮箱地址是使用Git进行代码管理的基本步骤之一，它可以帮助你正确记录你的代码贡献者身份，并与GitHub代码库进行正确的关联。</p><h3 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a><strong>生成秘钥</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;gitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p><strong>三连回车</strong>默认不设置密码，自动生成id_rsa和id_rsa.pub</p><img src="/images/github搭建博客/image-20230323162345966-16795781860424.png" alt="image-20230323162345966" style="zoom:67%;" /><p>打开<strong>id_rsa.pub</strong>复制里面的公钥，到github粘贴</p><img src="/images/github搭建博客/image-20230323162637286-16795781860425.png" alt="image-20230323162637286" style="zoom: 50%;" /><p>添加完成后测试，抛出问yes&#x2F;no的，选择<strong>yes</strong>,出现<strong>Hi加用户名</strong>就说明可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>那么，为什么要把公钥添加到github上？</p><p>​在Git中，公钥通常用于身份验证和授权。当你使用SSH协议连接到GitHub时，GitHub会验证你的身份以确保你是授权用户。在这种情况下，你需要将你的公钥添加到GitHub账户中。</p><p>​当你在GitHub上创建一个Git仓库并想要将代码推送到该仓库时，你需要使用SSH协议进行身份验证。为此，你需要将你的公钥添加到GitHub账户中。GitHub会将你的公钥与你的私钥进行比对以验证你的身份，并确定你是否有权限访问该仓库。</p><p>​在添加公钥之前，你需要生成一对公钥和私钥。你可以使用ssh-keygen命令生成公钥和私钥。公钥通常存储在名为“id_rsa.pub”的文件中，而私钥则存储在名为“id_rsa”的文件中。</p><p>​将公钥添加到GitHub账户中后，你可以使用SSH协议克隆和推送GitHub仓库中的代码，而不需要每次都输入密码进行身份验证。这使得与GitHub的交互更加方便和安全。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a><strong>安装Node.js</strong></h3><p>node.js网址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://nodejs.org/en/download<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -<br>sudo apt-get install -y nodejs<br></code></pre></td></tr></table></figure><p>也可以通过一下命令一键安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh<br></code></pre></td></tr></table></figure><p>为什么用到node.js</p><p>​GitHub Pages是一个免费的静态网站托管服务，支持用户通过Git仓库发布网站。在GitHub Pages中搭建博客时，如果需要使用一些高级功能，如自定义主题、使用Markdown语法编写文章、代码高亮、标签、分类、评论等，就需要使用一些前端框架或工具来帮助我们实现。</p><p>​其中，Node.js是一款基于Chrome V8引擎的JavaScript运行环境，它具有事件驱动、非阻塞I&#x2F;O模型 等特点，适用于高并发、数据密集型的应用程序。在GitHub Pages中，使用Node.js可以帮助我们实现自动化构建、打包、压缩等任务，同时也可以通过一些工具库来实现一些高级功能，如Webpack、Gulp、Grunt等。此外，Node.js还可以帮助我们快速搭建一个本地的开发环境，方便我们进行博客主题的开发和测试。</p><p>​综上所述，Node.js在GitHub Pages中搭建博客中扮演了重要的角色，它可以帮助我们实现一些高级功能，同时也可以提高博客的开发效率和质量。</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a><strong>安装hexo</strong></h3><p>​Hexo是一个基于Node.js的静态博客框架，可以使用Markdown或其他标记语言撰写文章，通过Hexo生成静态网页。Hexo的主要特点是速度快、容易使用和高度可配置性。Hexo支持大量的主题和插件，可以通过主题和插件来自定义和扩展博客的功能和外观。Hexo还提供了一些常用的功能，例如支持多语言、SEO优化、RSS生成等，是一款非常适合个人博客的框架。</p><p>安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a><strong>初始化博客</strong></h3><p><strong>myBlog是博客名字 随意</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myBlog<br></code></pre></td></tr></table></figure><p>进入myBlog目录</p><p>找到_config.yml进行编辑</p><img src="/images/github搭建博客/image-20230323185849905-16795781860428.png" alt="image-20230323185849905" style="zoom: 67%;" /><p>可以在<a href="https://hexo.io/themes/index.html%E4%B8%AD%E6%8C%91%E9%80%89%E4%B8%BB%E9%A2%98%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%A5%BD%E5%90%8E%E5%AD%98%E6%94%BE%E5%9C%A8themes%E7%9B%AE%E5%BD%95%E4%B8%AD%EF%BC%8C%E5%90%8C%E6%97%B6%E5%9C%A8_config.yml%E8%BF%9B%E8%A1%8C%E4%BF%AE%E6%94%B9">https://hexo.io/themes/index.html中挑选主题，下载好后存放在themes目录中，同时在_config.yml进行修改</a></p><h3 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a><strong>添加文章</strong></h3><p>直接把写好的文章导入到_posts文件夹中，注意得是md文档格式</p><p>typora下载地址<a href="https://typora.io/">https://typora.io</a></p><img src="/images/github搭建博客/image-20230323191131597-16795781860427.png" alt="image-20230323191131597" style="zoom:67%;" /><p>或者直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new 文章名<br></code></pre></td></tr></table></figure><h3 id="发布网站"><a href="#发布网站" class="headerlink" title="发布网站"></a><strong>发布网站</strong></h3><p>接下来就是hexo三件套</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>hexo clean 是清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后）</p><p>hexo generate 是编译生成静态文件</p><p>hexo deploy 是进行部署 把代码发布到github上去</p><p>当然发布之前也可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p>生成网站预览，通过<a href="http://localhost:4000访问">http://localhost:4000访问</a></p><h3 id="密码问题"><a href="#密码问题" class="headerlink" title="密码问题"></a><strong>密码问题</strong></h3><p>有时候发布的时候也许会遇到这样的问题，就是输入用户名之后的密码不对，点击头像下的settings</p><img src="/images/github搭建博客/image-20230323192403492-167957818604211.png" alt="image-20230323192403492" style="zoom: 67%;" /><p>拉到最底下进入developer settings</p><p><img src="/images/github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20230323192459199-16795781860426.png" alt="image-20230323192459199"></p><p>点击personal access tokens 进入tokens(classic)点击添加generate new token，选择classic那个</p><p><img src="/images/github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20230323192553903-167957818604210.png" alt="image-20230323192553903"></p><p>名字随意，过期时间随意，把<strong>repo</strong>和<strong>delete_repo</strong>勾选上，点击generate token生成token，这个<strong>token只会显示一次</strong>，记得保存好</p><img src="/images/github搭建博客/image-20230323192735294-16795781860429.png" alt="image-20230323192735294" style="zoom:67%;" /><p><img src="/images/github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20230323192858108-167957818604312.png" alt="image-20230323192858108"></p><h3 id="更换域名"><a href="#更换域名" class="headerlink" title="更换域名"></a><strong>更换域名</strong></h3><p>如果想要更换域名的话直接在目录下添加一个CNAME文件里面写你的域名，如果换重新发布网站的话还得重写，建议直接写在原目录下</p><img src="/images/github搭建博客/image-20230323191804066-167957818604313.png" alt="image-20230323191804066" style="zoom:67%;" /><p>如果发现不能生效的话点击setting下的pages下的custom domain查看域名是否写对，当然域名解析也得配置好</p><img src="/images/github搭建博客/image-20230323192024808-167957818604314.png" alt="image-20230323192024808" style="zoom:67%;" /><h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a><strong>上传图片</strong></h3><p>在当前博客下source文件夹下创建images文件夹用于存放文件</p><p><img src="/images/github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20230323211842902.png" alt="image-20230323211842902"></p><p>同时把typora的偏好设置中插入图片的位置更改为复制到指定路径..&#x2F;..&#x2F;source&#x2F;images&#x2F;${filename}</p><p><img src="/images/github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20230323212003515.png" alt="image-20230323212003515"></p><p>同时在typora中选中格式-图像-设置图片根目录-选择source文件夹</p><p><img src="/images/github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20230323212241771.png" alt="image-20230323212241771"></p><p>当文件头出现这一栏，再将图片插入即可</p><p><img src="/images/github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20230323212428558.png" alt="image-20230323212428558"></p><p>自此，github搭建博客的基本操作已完成。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
